ToDoProvider.java:

package com.vedro.providers;

import java.util.HashMap;

import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import android.text.TextUtils;

public class ToDoProvider extends ContentProvider {

    static final String PROVIDER_NAME = "com.vedro.provider";
    static final String path = "content://" + PROVIDER_NAME + "/ToDos";
    static final Uri CONTENT_URI = Uri.parse(path);

    private static HashMap<String, String> TODOS_PROJECTION_MAP;

    static final int TODOS = 1;
    static final int TODO_ID = 2;

    // Чтобы помочь в выборе действия для выполнения со входящим URI контента,
    // в API поставщика имеется класс UriMatcher, который сопоставляет шаблоны
    // URI контента с целочисленными значениями. Такие целочисленные значения
    // можно использовать в операторе switch, который выбирает подходящее действие
    // для URI контента, которые соответствуют определенному шаблону.
    static final UriMatcher uriMatcher;

    static {
        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
        uriMatcher.addURI(PROVIDER_NAME, "ToDos", TODOS);
        uriMatcher.addURI(PROVIDER_NAME, "ToDos/#", TODO_ID);
    }

    private SQLiteDatabase db;

    @Override
    public boolean onCreate() {
        DBHelper dbHelper = new DBHelper(getContext());
        db = dbHelper.getWritableDatabase();
        return db != null;
    }

    @Override
    public Uri insert(Uri u, ContentValues values) {
        long rowID = db.insert(DBHelper.TABLE_TODO, "", values);

        // если запись была успешно добавлена
        if (rowID > 0) {
            Uri uri = ContentUris.withAppendedId(CONTENT_URI, rowID);
            getContext().getContentResolver().notifyChange(uri, null);
            return uri;
        }
        throw new SQLException("Не вышло добавить запись в " + u);
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
        SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
        qb.setTables(DBHelper.TABLE_TODO);
        switch (uriMatcher.match(uri)) {
            case TODOS:
                qb.setProjectionMap(TODOS_PROJECTION_MAP);
                break;
            case TODO_ID:
                qb.appendWhere(DBHelper.KEY_ID + "=" + uri.getPathSegments().get(1));
                break;
            default:
                throw new IllegalArgumentException("Неверный URI " + uri);
        }

        if (sortOrder == null || sortOrder == "") {
            // сортировать по названиям задач
            sortOrder = DBHelper.KEY_TODO;
        }
        Cursor c = qb.query(db, projection, selection, selectionArgs, null, null, sortOrder);

        c.setNotificationUri(getContext().getContentResolver(), uri);
        return c;
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        int count = 0;
        switch (uriMatcher.match(uri)) {
            case TODOS:
                count = db.delete(DBHelper.TABLE_TODO, selection, selectionArgs);
                break;
            case TODO_ID:
                String id = uri.getPathSegments().get(1);
                count = db.delete(DBHelper.TABLE_TODO, DBHelper.KEY_ID + " = " + id +
                        (!TextUtils.isEmpty(selection) ? " AND (" + selection + ')' : ""), selectionArgs);
                break;
            default:
                throw new IllegalArgumentException("Что-то не так с URI " + uri);
        }

        getContext().getContentResolver().notifyChange(uri, null);
        return count;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
        int count = 0;

        switch (uriMatcher.match(uri)) {
            case TODOS:
                count = db.update(DBHelper.TABLE_TODO, values, selection, selectionArgs);
                break;
            case TODO_ID:
                count = db.update(DBHelper.TABLE_TODO, values, DBHelper.KEY_ID + " = " + uri.getPathSegments().get(1) +
                        (!TextUtils.isEmpty(selection) ? " AND (" + selection + ')' : ""), selectionArgs);
                break;

            default:
                throw new IllegalArgumentException("Обновление не удалось из-за URI " + uri);
        }
        getContext().getContentResolver().notifyChange(uri, null);
        return count;
    }

    @Override
    public String getType(Uri uri) {
        switch (uriMatcher.match(uri)) {
            case TODOS:
                return "vnd.android.cursor.dir/vnd.example.todos";
            case TODO_ID:
                return "vnd.android.cursor.item/vnd.example.todos";
            default:
                throw new IllegalArgumentException("Неподдерживаемый URI: " + uri);
        }
    }
}

==============================================================================================================

MainActivity.java:

package com.vedro.providers;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;
import android.content.ContentValues;
import android.net.Uri;
import android.database.Cursor;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    public void addToDo(View view) {
        // добавление новой задачи
        ContentValues values = new ContentValues();

        // для этого примера, поля TABLE_TODO, KEY_ID и KEY_TODO в классе
        // DBHelper НЕ должны быть приватными!
        // о том, как узнать название нужного поля - в комменте ниже.
        values.put(DBHelper.KEY_TODO,
                ((EditText) findViewById(R.id.descriptor)).getText().toString());

        // ContentResolver используется для обращения к ContentProvider
        Uri uri = getContentResolver().insert(ToDoProvider.CONTENT_URI, values);

        if (uri != null) {
            // в случае успешной вставки вернётся URI добавленной строки
            Toast.makeText(this, uri.toString(), Toast.LENGTH_LONG).show();
        }
    }

    public void retrieveToDos(View view) {
        // получение записей из таблицы задач
        // любое приложение сможет получить данные по этому URI
        String path = "content://com.vedro.provider/ToDos";
        Uri todos = Uri.parse(path);
        // последний параметр - критерий сортировки
        Cursor c = getContentResolver().query(todos, null, null, null, DBHelper.KEY_TODO);

        if (c != null) {

            // как получить список всех полей таблицы ToDos
            /*
            for (int i = 0; i < c.getColumnCount(); i++) {
                Toast.makeText(this,
                        "column " + i + " = " + c.getColumnName(i),
                        Toast.LENGTH_SHORT).show();
            }
            */

            /*

            The reason you know the column names for the SDK-supplied providers is
            because that's (somewhat) documented in the JavaDocs.

            For your Content Provider you need to document:
            1) the Uri pattern(s) that you are expecting, particularly for key Uri
            values (e.g., CONTENT_URI values for queries)
            2) the column names that can be requested in a projection
            3) the "rules of the game" for how you are interpreting the selection,
            selectionArgs, and sortOrder parameters to query (e.g., can these be
            considered ordinary SQL using your column names?)

            Whether you supply this documentation in the form of Web pages,
            a PDF file, a training video, or something else, is up to you.

            */

            if (c.moveToFirst()) {
                do {
                    // показать все задачи тостами
                    Toast.makeText(this,
                            c.getInt(c.getColumnIndex(DBHelper.KEY_ID)) + ", "
                                    + c.getString(c.getColumnIndex(DBHelper.KEY_TODO)),
                            Toast.LENGTH_SHORT).show();
                } while (c.moveToNext());
            }
            c.close();
        }
    }
}

========================================================================================================

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:paddingBottom="20dp"
    android:paddingLeft="20dp"
    android:paddingRight="20dp"
    android:paddingTop="20dp"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/header"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="ToDo Content Provider"
        android:textSize="30sp" />

    <EditText
        android:id="@+id/descriptor"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="10dp"
        android:hint="Текст задания" />

    <Button
        android:id="@+id/adder"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="10dp"
        android:onClick="addToDo"
        android:text="Добавить задачу"
        android:textAllCaps="false" />

    <Button
        android:id="@+id/retriver"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="10dp"
        android:onClick="retrieveToDos"
        android:text="Получить список заданий"
        android:textAllCaps="false" />

</LinearLayout>

==========================================================================

AndroidManifest.xml (на всякий случай):

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.vedro.thirdproject">

    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat.Light.DarkActionBar">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <provider
            android:name=".ToDoProvider"
            android:authorities="com.vedro.provider" />
    </application>

</manifest>

=====================================================================================

DBHelper.java:

практически без изменений, только нужно будет убрать private c трёх полей:
     static final String TABLE_TODO = "ToDos";
     static final String KEY_ID = "id";
     static final String KEY_TODO = "todo";
     
=====================================================================================

Tag.java и ToDo.java без изменений
