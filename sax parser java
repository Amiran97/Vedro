package com.vedro.xmlparsing;

import android.Manifest;
import android.os.Bundle;
import android.os.Environment;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.Toast;

import com.karumi.dexter.Dexter;
import com.karumi.dexter.MultiplePermissionsReport;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.multi.MultiplePermissionsListener;

import javax.xml.parsers.ParserConfigurationException;

import java.io.File;

import java.io.IOException;
import java.util.List;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class MainActivity extends AppCompatActivity {

    static String logTag = "xml_parse";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Dexter.withActivity(this)
                .withPermissions(Manifest.permission.READ_EXTERNAL_STORAGE,
                        Manifest.permission.WRITE_EXTERNAL_STORAGE)
                .withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        Toast.makeText(MainActivity.this, "OK", Toast.LENGTH_SHORT).show();
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {

                    }
                }).check();

        try {

            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser saxParser = factory.newSAXParser();

            DefaultHandler handler = new DefaultHandler() {

                boolean bfname = false;
                boolean blname = false;
                boolean bnname = false;
                boolean bsalary = false;

                @Override
                public void startElement(String uri, String localName, String qName, Attributes attributes)
                        throws SAXException {

                    Log.i(logTag, "Start Element: " + qName);

                    if (qName.equalsIgnoreCase("FIRSTNAME")) {
                        bfname = true;
                    } else if (qName.equalsIgnoreCase("LASTNAME")) {
                        blname = true;
                    } else if (qName.equalsIgnoreCase("NICKNAME")) {
                        bnname = true;
                    } else if (qName.equalsIgnoreCase("SALARY")) {
                        bsalary = true;
                    }
                }

                @Override
                public void endElement(String uri, String localName, String qName) throws SAXException {
                    Log.i(logTag, "End Element: " + qName);
                }

                @Override
                public void characters(char ch[], int start, int length)
                        throws SAXException {

                    if (bfname) {
                        Log.i(logTag, "First Name: "
                                + new String(ch, start, length));
                        bfname = false;
                    }

                    if (blname) {
                        Log.i(logTag, "Last Name: "
                                + new String(ch, start, length));
                        blname = false;
                    }

                    if (bnname) {
                        Log.i(logTag, "Nick Name: "
                                + new String(ch, start, length));
                        bnname = false;
                    }

                    if (bsalary) {
                        Log.i(logTag, "Salary: "
                                + new String(ch, start, length));
                        bsalary = false;
                    }
                }
            };

            File sdPath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
            File sdFile = new File(sdPath, "parse3.xml");

            saxParser.parse(sdFile, handler);
        } catch (ParserConfigurationException | SAXException | IOException e) {
            Log.i(logTag, "Smth wrong!");
        }
    }
}
