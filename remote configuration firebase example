menu / main_menu.xml:

<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <item
        android:id="@+id/sign_out_menu"
        android:title="Sign Out"
        app:showAsAction="never" />
    <item
        android:id="@+id/reconfig"
        android:title="Reconfig"
        app:showAsAction="never" />
</menu>

===========================================================================================================================

MainActivity.java:

package com.vedro.firebase;

import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.support.annotation.NonNull;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.firebase.ui.database.FirebaseRecyclerAdapter;
import com.google.firebase.database.FirebaseDatabase;

import de.hdodenhof.circleimageview.CircleImageView;

import com.bumptech.glide.Glide;
import com.google.firebase.remoteconfig.FirebaseRemoteConfig;
import com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings;

import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity implements GoogleApiClient.OnConnectionFailedListener {

    private GoogleApiClient mGoogleApiClient;
    private FirebaseAuth mFirebaseAuth;
    private FirebaseUser mFirechatUser;

    private DatabaseReference db;
    private FirebaseRecyclerAdapter<ChatMessage, MyViewHolder> fireAdapter;
    private RecyclerView rv;
    private LinearLayoutManager lm;
    private ProgressBar progress;
    private String mPhotoUrl;
    private FirebaseRemoteConfig mFirebaseRemoteConfig;

    private EditText edit;
    public static final String DEFAULT_NAME = "Ivan";
    private String userName;

    public static class MyViewHolder extends RecyclerView.ViewHolder {
        TextView msgTextView;
        TextView userTextView;
        CircleImageView userImageView;

        public MyViewHolder(View v) {
            super(v);
            msgTextView = itemView.findViewById(R.id.msgTextView);
            userTextView = itemView.findViewById(R.id.userTextView);
            userImageView = itemView.findViewById(R.id.userImageView);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.sign_out_menu:
                mFirebaseAuth.signOut();
                Auth.GoogleSignInApi.signOut(mGoogleApiClient);
                userName = DEFAULT_NAME;
                startActivity(new Intent(this, AuthActivity.class));
                return true;
            case R.id.reconfig:
                fetchConfig();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    public void fetchConfig() {
        long cacheExpiration = 0;
        if (mFirebaseRemoteConfig.getInfo().getConfigSettings()
                .isDeveloperModeEnabled()) {
            cacheExpiration = 0;
        }
        mFirebaseRemoteConfig.fetch(cacheExpiration)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        mFirebaseRemoteConfig.activateFetched();

                        // собственно, настройка экшн-бара из ремоут конфига
                        getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor(mFirebaseRemoteConfig.getString("bar_color"))));
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {

                    }
                });
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // старт сервиса проверки обновлений базы
        //stopService(new Intent(this, CheckUpdateService.class));
        //startService(new Intent(this, CheckUpdateService.class));

        //////////////////////////////////////////////////////////////
        // remote config
        mFirebaseRemoteConfig = FirebaseRemoteConfig.getInstance();

        FirebaseRemoteConfigSettings firebaseRemoteConfigSettings =
                new FirebaseRemoteConfigSettings.Builder()
                        .setDeveloperModeEnabled(true)
                        .build();

        Map<String, Object> defaultConfigMap = new HashMap<>();
        defaultConfigMap.put("bar_color", "blue");

        ///////////////////////////////////////////////////////

        progress = findViewById(R.id.progressBar);
        rv = findViewById(R.id.messageRecyclerView);
        lm = new LinearLayoutManager(this);
        lm.setStackFromEnd(true);
        rv.setLayoutManager(lm);

        userName = DEFAULT_NAME;
        edit = (EditText) findViewById(R.id.msgEditText);

        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .enableAutoManage(this /* FragmentActivity */, this /* OnConnectionFailedListener */)
                .addApi(Auth.GOOGLE_SIGN_IN_API)
                .build();

        mFirebaseAuth = FirebaseAuth.getInstance();
        mFirechatUser = mFirebaseAuth.getCurrentUser();
        if (mFirechatUser == null) {
            startActivity(new Intent(this, AuthActivity.class));
            finish();
            return;
        } else {
            userName = mFirechatUser.getDisplayName();
            if (mFirechatUser.getPhotoUrl() != null) {
                mPhotoUrl = mFirechatUser.getPhotoUrl().toString();
            }
        }

        db = FirebaseDatabase.getInstance().getReference();
        fireAdapter = new FirebaseRecyclerAdapter<ChatMessage, MyViewHolder>(
                ChatMessage.class,
                R.layout.chat_message,
                MyViewHolder.class,
                db.child("messages")) {

            @Override
            protected void populateViewHolder(MyViewHolder viewHolder,
                                              ChatMessage friendlyMessage, int position) {
                progress.setVisibility(ProgressBar.INVISIBLE);
                viewHolder.msgTextView.setText(friendlyMessage.getText());
                viewHolder.userTextView.setText(friendlyMessage.getName());
                if (friendlyMessage.getPhotoUrl() == null) {
                    viewHolder.userImageView
                            .setImageDrawable(ContextCompat
                                    .getDrawable(MainActivity.this,
                                            R.drawable.ic_account_circle_black_36dp));
                } else {
                    Glide.with(MainActivity.this)
                            .load(friendlyMessage.getPhotoUrl())
                            .into(viewHolder.userImageView);
                }
            }
        };

        fireAdapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {
            @Override
            public void onItemRangeInserted(int positionStart, int itemCount) {
                super.onItemRangeInserted(positionStart, itemCount);
                int friendlyMessageCount = fireAdapter.getItemCount();
                int lastVisiblePosition =
                        lm.findLastCompletelyVisibleItemPosition();

                if (lastVisiblePosition == -1 ||
                        (positionStart >= (friendlyMessageCount - 1) &&
                                lastVisiblePosition == (positionStart - 1))) {
                    rv.scrollToPosition(positionStart);
                }
            }
        });

        rv.setLayoutManager(lm);
        rv.setAdapter(fireAdapter);

        Button mSendButton = findViewById(R.id.sendButton);
        mSendButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ChatMessage friendlyMessage = new
                        ChatMessage(edit.getText().toString(), userName, mPhotoUrl);
                db.child("messages").push().setValue(friendlyMessage);
                edit.setText("");
            }
        });
    }

    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
        Toast.makeText(this, "connection failed (MainActivity)", Toast.LENGTH_SHORT).show();
    }
}
